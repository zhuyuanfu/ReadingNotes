第一章名为《焦油坑》，用以比喻软件开发工作根本上的、无法避免的困境：软件工程是一项困难的暂时的工作，只有很少的项目能满足目标、进度和预算的要求。而最终，无论成功或失败，所有的项目都将宣告死亡，正如再凶悍的猛兽也无法挣脱焦油坑的束缚。这个故事不会轻易停止，乐观而充满希望的的程序猿像觅食的野兽一样前赴后继冲向焦油坑。年复一年，只有新的软件工程项目和新进焦油坑的动物能存活一段时间。
程序是一种编程系统产品，它可以在作者的环境下运行。从程序到编程系统，添加接口和系统集成，需要花3倍的成本。将得到的编程系统产品化（加上通用化，测试，文档和维护）可以使它变成编程系统产品，它的成本是程序的9倍，但只有它才是真正有用的产品。
编程从业者的快乐有五个来源。第一，创建事物；第二，开发对他人有用的东西；第三，将相互啮合的零部件组装在一起，看它们以精妙的方式运行；第四，持续学习；第五，在易于驾驭的介质上工作。编程从业者的苦恼主要有四点。第一，苦恼来自追求完美；第二，苦恼来自由他人设定目标、供给资源和提供信息；第三，寻找琐碎的bug；第四，当投入了大量劳动，产品即将完成，却已显得过时。

第二章名为《人月神话》，其含义是：在无法将任务分解给参与人员，或者人员之间必须互相交流的时候，人月互换就是不可能发生的神话，人数和时间不能互换。事实上，因为乘法具有交换律，将（人×月）作为工作量的单位隐含了“如果进度落后于计划，可以用增加人数的方法来追赶进度”的危险和带有欺骗性的暗喻。
在众多软件项目中缺乏合理的进度安排是造成项目滞后的最主要的原因。导致这种灾难如此普遍的原因有5点。第一，我们对估算技术缺乏有效的研究，我们往往充满自信地认为一切都将运作良好，每一项任务仅花费它所“应该”花费的时间，这是非常不符合实际状况的假设；第二，我们采用的估算技术隐含地假设人和月可以互换，错误地将进度与工作量相互混淆；第三，由于对自己的估算缺乏信心，软件经理通常不会有足够的耐心持续估算这项工作；第四，对进度缺少跟踪和监督；第五，当意识到进度的落后时，下意识的反应是增加人力。
在众多软件项目中，缺乏合理的进度安排是造成项目滞后的最主要原因。一个可选的进度安排方法是：
1/3计划
1/6编码
1/4构建测试和早期系统测试
1/4系统测试，所有的构件已完成

第三章《外科手术队伍》提出了小规模（10人）开发项目的一个比较高效的角色分工方案：
外科医生：又称首席程序员
副手：是外科医生的后备
管理员：是外科医生的老板
编辑：负责文档的生成
两个文秘：管理员和编辑每个人需要一个文秘
程序职员：负责维护编程产品库中所有团队的技术记录
工具维护人员：保证所有基本服务的可靠性，以及承担团队成员所需要的特殊工具（特别是交互式计算机服务）的构建、维护和升级责任。
测试人员：为外科医生设计大量合适的测试用例，并为这些测试用例设计测试数据
语言专家：寻找一种简洁、有效的使用语言的方法来解决复杂、晦涩或棘手的问题。通常一个语言专家可以为2-3个外科医生服务
在这种分工下，外科医生和副手都了解所有的设计和全部的代码，这节省了空间分配、磁盘访问等的劳动量，同时也确保了概念上的完整性；这样的分工不存在利益的差别，观点不一致之处可以由外科医生单方面来统一。对问题不进行分解和划分为上下级的关系使外科手术队伍可以达到客观的一致性。
如果要对这样的小型队伍进行扩建，扩建的成功依赖于每个部分的概念完整性得到彻底的提高――决定设计的人员是原来的1/7或更少。所以，可以让200人去解决问题，而仅仅需要协调20个“外科医生”的思路。

第四章标题为《贵族专制、民主政治和系统设计》。贵族专制的含义是：做设计的只能是少数人。民主政治的含义是，虽然不只有结构师才有好的创意，新的概念经常来自实践人员或者用户，但是，系统的概念完整性决定了其使用的容易程度，不能与系统基本概念进行整合的良好想法和特色最好放到一边，不予考虑。系统设计中最重要的考虑因素是概念完整性，宁可舍弃一些不规则的特性和改进，也不提倡独立和无法整合的系统，哪怕它们其实包含着许多很好的设计。
由于目标是易用性，功能与概念的复杂程度的比值才是系统设计的最终测试标准。单是功能或单是简洁都无法成为一个好的设计评判标准。简洁和直白来自概念的完整性。每个部分必须反映相同的原理需求的一致平衡。在语法上，每个部分应使用相同的技巧；在语义上，应具有同样的相似性。易用性实际上需要设计的一致性和概念上的完整性。

第五章标题是《画蛇添足》，它的含义是，在开发第一个项目成功以后，开发第二个项目时，结构师常常会过分设计它


















