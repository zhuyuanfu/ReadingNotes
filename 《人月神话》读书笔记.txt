charset = utf8 
see also https://github.com/zhuyuanfu/ReadingNotes/blob/master/%E3%80%8A%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.txt

第一章名为《焦油坑》，用以比喻软件开发工作根本上的、无法避免的困境：软件工程是一项困难的暂时的工作，只有很少的项目能满足目标、进度和预算的要求。而最终，无论成功或失败，所有的项目都将宣告死亡，正如再凶悍的猛兽也无法挣脱焦油坑的束缚。这个故事不会轻易停止，乐观而充满希望的的程序猿像觅食的野兽一样前赴后继冲向焦油坑。年复一年，只有新的软件工程项目和新进焦油坑的动物能存活一段时间。
程序是一种编程系统产品，它可以在作者的环境下运行。从程序到编程系统，添加接口和系统集成，需要花3倍的成本。将得到的编程系统产品化（加上通用化，测试，文档和维护）可以使它变成编程系统产品，它的成本是程序的9倍，但只有它才是真正有用的产品。
编程从业者的快乐有五个来源。第一，创建事物；第二，开发对他人有用的东西；第三，将相互啮合的零部件组装在一起，看它们以精妙的方式运行；第四，持续学习；第五，在易于驾驭的介质上工作。编程从业者的苦恼主要有四点。第一，苦恼来自追求完美；第二，苦恼来自由他人设定目标、供给资源和提供信息；第三，寻找琐碎的bug；第四，当投入了大量劳动，产品即将完成，却已显得过时。

第二章名为《人月神话》，其含义是：在无法将任务分解给参与人员，或者人员之间必须互相交流的时候，人月互换就是不可能发生的神话，人数和时间不能互换。事实上，因为乘法具有交换律，将（人×月）作为工作量的单位隐含了“如果进度落后于计划，可以用增加人数的方法来追赶进度”的危险和带有欺骗性的暗喻。
在众多软件项目中缺乏合理的进度安排是造成项目滞后的最主要的原因。导致这种灾难如此普遍的原因有5点。第一，我们对估算技术缺乏有效的研究，我们往往充满自信地认为一切都将运作良好，每一项任务仅花费它所“应该”花费的时间，这是非常不符合实际状况的假设；第二，我们采用的估算技术隐含地假设人和月可以互换，错误地将进度与工作量相互混淆；第三，由于对自己的估算缺乏信心，软件经理通常不会有足够的耐心持续估算这项工作；第四，对进度缺少跟踪和监督；第五，当意识到进度的落后时，下意识的反应是增加人力。
一个比较好的进度安排方法是：
1/3计划
1/6编码
1/4构建测试和早期系统测试
1/4系统测试，所有的构件已完成

第三章《外科手术队伍》提出了小规模（10人）开发项目的一个比较高效的角色分工方案：
外科医生：又称首席程序员
副手：是外科医生的后备
管理员：是外科医生的老板
编辑：负责文档的生成
两个文秘：管理员和编辑每个人需要一个文秘
程序职员：负责维护编程产品库中所有团队的技术记录
工具维护人员：保证所有基本服务的可靠性，以及承担团队成员所需要的特殊工具（特别是交互式计算机服务）的构建、维护和升级责任。
测试人员：为外科医生设计大量合适的测试用例，并为这些测试用例设计测试数据
语言专家：寻找一种简洁、有效的使用语言的方法来解决复杂、晦涩或棘手的问题。通常一个语言专家可以为2-3个外科医生服务
在这种分工下，外科医生和副手都了解所有的设计和全部的代码，这节省了空间分配、磁盘访问等的劳动量，同时也确保了概念上的完整性；这样的分工不存在利益的差别，观点不一致之处可以由外科医生单方面来统一。对问题不进行分解和划分为上下级的关系使外科手术队伍可以达到客观的一致性。
如果要对这样的小型队伍进行扩建，扩建的成功依赖于每个部分的概念完整性得到彻底的提高――决定设计的人员是原来的1/7或更少。所以，可以让200人去解决问题，而仅仅需要协调20个“外科医生”的思路。

第四章标题为《贵族专制、民主政治和系统设计》。贵族专制的含义是：做设计的只能是少数人。民主政治的含义是，虽然不只有结构师才有好的创意，新的概念经常来自实践人员或者用户，但是，系统的概念完整性决定了其使用的容易程度，不能与系统基本概念进行整合的良好想法和特色最好放到一边，不予考虑。系统设计中最重要的考虑因素是概念完整性，宁可舍弃一些不规则的特性和改进，也不提倡独立和无法整合的系统，哪怕它们其实包含着许多很好的设计。
由于目标是易用性，功能与概念的复杂程度的比值才是系统设计的最终测试标准。单是功能或单是简洁都无法成为一个好的设计评判标准。简洁和直白来自概念的完整性。每个部分必须反映相同的原理需求的一致平衡。在语法上，每个部分应使用相同的技巧；在语义上，应具有同样的相似性。易用性实际上需要设计的一致性和概念上的完整性。

第五章标题是《画蛇添足》，它的含义是，在开发第一个项目成功以后，开发第二个项目时，结构师常常会过分设计它。为了避免这种情况，设计师在无法跳过第二次系统的情况下，可以有意识地关注这个系统的特殊危险，运用特别的自我约束准则来避免哪些功能上的过于修饰；也可以根据系统基本理念及目的变更，舍弃一些功能。对项目经理来说，为了避免开发第二个系统所引起的后果，他必须坚持至少拥有两个系统以上开发经验结构师的决定。同时，他可以不断提出正确的问题，确保原则上的概念和目标在详细设计中得到完整的体现。
如果需要向开发人员的做事方法提出挑战，结构师必须：
牢记是开发人员承担创造性和发明性的实现责任，所以结构师只能建议，而不能支配；
时刻准备着为所制定的说明建议一种实现的方法，同样准备接受其他任何能达到目标的方法；
对上述的建议保持低调和不公开；
准备放弃坚持所做的改进建议。

第六章《贯彻执行》提出了一个确保每个人都听到、理解并实现结构师的决策，并使小组保持系统概念上的完整性的一套方法。这个方法包括以下几个重点：
手册。手册是产品的外部规格说明，不仅要描述包括所有界面在内的用户可见的一切，还要避免描述用户看不见的事物。要保证琐碎的问题处理原则上的一致性。
形式化定义。形式化定义是精确的，倾向完整。它可以很容易地表达异常和强调对比的关系，最重要的是，它可以解释原因。
直接整合。
例会和年度大会。在例会中，任何人都可以提出问题和修改意见。少数解决方案会被传递给一个或多个结构师，并且要么达成共识，要么由首席结构师来决定方案。例会的决策会给出迅捷的结论，使工作继续开展下去。年度大会是用来解决一段较长时间内的分歧，这些分歧可能包括没有很好贯彻的决定，没有被某些人接受的小事情，其他决定造成了未遇到的问题等一系列逐渐堆积起来的不愉快。
多重实现。
电话日志。
产品测试。

第七章的标题《为什么巴比伦塔会失败》是一个问句。它的答案是：因为缺乏交流和组织。交流的缺乏导致了争辩，沮丧和群体猜忌。他们无法相互交谈，从而无法合作。当合作无法进行时，工作陷入了停顿。
现实中的大型编程项目也是如此。随着工作的进行，许多小组慢慢地修改自己程序的功能、规模和速度，他们明确或隐含地更改了一些有效输入和输出结果用法上的规定。不加以沟通的话，这些变动了的输入输出就无法和别人的接口对上。
为了在团队之间进行相互之间有效的交流沟通，作者提出了三个解决方案：
非正式途径。清晰定义小组内部相互关系和充分利用电话，鼓励大量的电话沟通，从而达到对所书写文档的共同理解。
例会。常规项目会议。会议中，团队一个接一个地进行简要的技术陈述。这种方式非常有用，能澄清成百上千个细小误解。
工作手册。在项目的开始阶段，应该准备正式的项目工作手册。它不是一篇独立的文档，它是对项目必须铲除的一系列文档进行组织的一种结构。

第八章《胸有成竹》列举了许多研究者的数据，这些数据都明确地指出：随着机器指令的增加，工作总量（人×月）呈指数函数型增加。
有两个重要的结论：
对常用的编程语句而言，生产率似乎是固定的。这个固定的生产率包括了编程中需要注释并可能存在错误的情况。
使用适当的高级语言，编程的生产率可以提高五倍。

第九章《削足适履》谈的是产品的时间和空间限制。三个道理：
第一，和指定驻留空间预算一样，应该制定总体规模的预算；和制定规模预算一样，应该制定后台存储访问的预算。
第二，在指明模块有多大的同时，确切定义模块的功能
第三，在整个实现的过程期间，系统结构师必须保持持续的警觉，确保连贯的系统完整性。同时也要培养开发人员从系统整体出发、面向用户的态度。

第十章标题《提纲挈领》的意思是，只有书面计划是精确和可以沟通的。推荐的文档内容包括：目标，产品技术说明，时间进度，资金预算，工作空间地点分配和人员组织图。

第十一章标题《未雨绸缪》的含义是，必须为抛弃做好准备，为舍弃而计划。唯一不变的就是变化本身，事先为变化做准备总比假设变化不会出现好得多。

第十二章《干将莫邪》介绍了开发工作的利器，包括：
目标机器
辅助机器和数据服务
高级语言和交互式编程

第十三章《整体和部分》讲的是排错。排错可以有以下几种思路：
剔除bug的设计：代码层面
构建单元调试：模块层面
系统集成调试：系统层面

第十四章《祸起萧墙》的寓意是，微小而繁多的延迟造成项目巨大的落后，不能按期交付，重大灾害反而比较容易处理。
如何避免祸起萧墙？有这几种方法：
制定里程碑
提高团队的进取水平
报告项目延迟时，老板必须区别行动信息和状态信息，不对项目经理可以解决的问题做出反应，也不在检查状态报告的时候做安排。

第十五章标题是《另外一面》。“一面”是指代码，“另外一面”是指文档。
自文档化的程序被认为是最好的文档。有三种方法构造自文档化的程序：
第一，借助那些出于语言的要求而必须存在的语句；
第二，尽可能地使用空格和一致的格式提高程序的可读性，表现从属和嵌套关系；
第三，以段落注释的形式，向程序中插入必要的记叙性文字。

第十六章《没有银弹》认为软件开发从根本上讲是困难的，困难源于根本问题（规格说明、设计和测试这些概念上的结构）和次要问题（对概念进行表达和对实现逼真程度进行验证）。次要问题已经有一些比较有效的解法，例如高级编程语言，面向对象的编程思想和人工智能；但是根本问题目前尚无有效实践。针对概念上的根本问题的一些颇具前途的方法有：用购买取代自行开发，需求精练和快速原型，增量开发和聘用卓越的设计人员。

第十七章《再论“没有银弹”》的中心思想是，《没有银弹》的观点和结论在发表了9周年后仍然是符合实际的。面向对象和重用仍然不占主流。

第十八章《<人月神话>的是与非》副标题是For brevity is very good ,where we are, or are not understood.我认为翻译成“无论别人懂不懂我们说的话，说得简短精炼些总是有好处的。”更好。原翻译是“我们理解也好，不理解也好，描述都应该简短精炼。”这一章没什么新观点，只是对第一到第十五章进行了概括总结。

第十九章《20年后的人月神话》强调了当年的人月神话中这几点：
概念完整性和结构师；
要小心开发第二个系统所引起的盲目的功能和频率猜测；
构建舍弃原型，增量开发模型更好。
观察到新时期成功的案例：
图形界面。
纠正了自己的一个错误：
信息隐藏-而不是信息公开-才是唯一提高软件设计水平的途径。

