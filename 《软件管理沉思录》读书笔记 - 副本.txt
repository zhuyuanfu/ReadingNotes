第一章《我的第一次BillG审查》记录了作者第一次被比尔盖茨审查的过程。作者通过好奇地检查日期函数发现了不对劲的地方，追根究底发现了是为了节约内存而导致了那个bug。第二天比尔盖茨来当面审查的时候，作者回答出了正确的答案，于是比尔盖茨罕见地没有发火，很满意地离开了。

第二章《寻找优秀的程序员》认为，不够优秀的程序员才会去投放简历，足够优秀的程序员是早有足够好的去处的。为了招收到好程序员，管理者需要（1）参加新技术的会议，结识热爱新技术的人，他们可能是潜在的优秀程序员；（2）去学校招募实习生；（3）成立自己的技术社区。需要注意的是，优秀的员工推荐的人可能不是聪明的程序员。

第三章《寻找优秀的程序员之实战指南》讲解了如何才能招收优秀的程序员。作者认同《人件》中“给员工提供私人空间和窗口景色”的观点。作者认为需要给程序员提供良好的工作环境，包括椅子和巨大的显示器。作者认为程序员需要被尊重，需要有开心活跃的同事。对待程序员最好提出建议而不是发布命令。程序员的世界容不下办公室的勾心斗角，正确比明争暗斗重要得多。最好让程序员知道自己想干的活，选择自己喜欢的语言。程序员决定去哪里工作时，薪水的位置非常低。

第四章《三种管理方法》给出了管理团队的三种方法：军事化管理法，经济利益驱动法和认同法。

第五章《军事化管理法》指出，军事化管理法有三个缺点。第一，程序员不喜欢军事化管理法。第二，军事化管理法没有足够的时间用在微观管理上。第三，相比于管理者，程序员通常拥有更多的信息，所以决策不适合交给管理者来做。

第六章《经济利益驱动法》认为，这种方法适合管理普通员工，不适合管理程序员，因为这种管理方法将程序员的内部激励转化为持续时间和效果都弱得多的外部激励。另外，使用经济利益驱动法是鼓励程序员与制度博弈。这种管理法的最大问题是，它根本不是一种管理，更像是巧妙的推卸责任。

第七章《认同法》认为认同法才是真正有效的管理程序员的办法。认同法的第一部分是使人认为公司的目标在某种程度上是高尚的，第二部分是向人们提供必要的信息，使公司向正确方向前进。

第八章《学校只教Java的危险性》认为Java区分度不够，或者说Java的难度不足以筛选掉不够聪明的计算机学生。作者狂喷平庸的学生只能学会Java，理解不了指针和递归，我感觉膝盖中了一箭。

第九章《在耶鲁大学的演讲》作者继续黑Java。在质量派与务实派的争斗中，作者支持务实派。在Windows与Unix的争斗中，作者支持Unix的风格――命令行为本，UI为末，嘲讽Windows风格――所有操作与UI绑定。作者认为，内部程序员的工作很糟糕，因为内部工作违反了程序员精益求精的习惯，与之相对的专业的软件公司的情况就好得多。撰写技术内容的文章也是很重要的技能。在本章结尾，作者欢迎想要学习如何开发软件的学生申请他的公司的实习机会。

第十章《给计算机系学生的建议》列出了作者针对计算机专业的7条建议：1，毕业前练好写作；2，毕业前学好C语言；3，毕业前学好微观经济学；4，不要因为枯燥就不选修非计算机专业的课程；5，选修有大量编程实践的课程；6，别担心所有工作都被印度人抢走；7，找一份好的暑期实习工作。

第十一章《字体平滑、反锯齿和次像素渲染》指出用户更加喜欢自己已经习惯了的设计风格。

第十二章《寸土必争》强调了注意细节的意义。当你打磨了一个又一个细节后，拿出来的就是一件真正优秀的产品。

第十三章《大构想的陷阱》是对《梦断代码》一书的评论。作者认为，做决策的人宜少不宜多，并且最好把无关因素排除到会议之外。作者通过分析需求、逐个批判功能的方式说明Chandler为什么会失败 。

第十四章《别给用户太多选择》讲的是过多选项会给用户带来手足无措。作者举的例子是windows vista的关机菜单，它一共有9条选项。随后，作者演示了如何把繁多的选项逐渐削减至两个选项，使读者直接体验选项骤减的清爽感。最后，作者指出太多的选择不会让用户幸福。

第十五章《易用性是不够的》中，作者认为虽然易用性很重要，但设计社会化界面更重要。当你在编写充当人与人之间中介的软件时，做好易用性设计之后，下一步就必须做好社会化设计，而且，社会化设计比易用性设计更重要。如果社会化界面一塌糊涂，那么就算你有世界上最好的用户界面，你的软件也活不了。作者举了一个在自己的论坛中隔离垃圾广告的例子，说明了相对于防御式编程，应用社会化的方式更好地防止垃圾广告影响论坛社区。

第十六章《用软件搭建社区》中，作者提出，许多程序员非常渴望多一些人际交往。随后接受了对自己和Joel论坛的一个采访，并发表了自己的看法。

第十七章《火星人的项目》讨论的是版本升级过程中发生的协议不兼容的事情。升级是引入新功能的过程，带来改变是一件不稳定的、危险的事情。IE8修复了旧版本的bug，导致许多利用或主动适应旧版本IEbug的网页不能良好显示。一边是巨大数量的旧版网页，另一边是更加标准更少bug的新浏览器，根本没法选择。理想主义者在大原则上是百分之百正确的，正如实用主义者在现实中也是百分之百正确的。他们之间的口水仗将会持续很多年。

第十八章《为什么MS OFFICE文件格式如此复杂》解释了为什么微软办公室软件如此复杂的问题。第一，由于历史原因，office被设计为使用二进制格式进行存储；第二，由于每次更新否加入新功能并兼容旧功能，所以保留了大量过时的、难懂的、不受欢迎的、少有人使用的功能，这些功能也加大了文件格式的复杂度。针对这些复杂的格式，作者给出的对策有：①，让office给你干脏活；②，用一种更简单的格式生成文件。

第十九章《要挣钱，就别怕脏》讲了这么一个道理：解决“麻烦事”，市场就会向你支付报酬。解决简单的问题是拿不到钱的。

第二十章《循证式日程规划》展示了作者开发一个日程规划软件的例子。在这一过程中，首先需要想清楚自己想要干什么，想清楚详细的工作步骤，将它需要的时间控制在16小时内。其次，需要追踪时间的用途，保留好工作时间记录单。接着，需要对未来情况进行模拟。最后，关于被中途打断，可以将实际情况记录下来，忠于实际的记录能比较准确地预测程序猿的效率。在原始规划的时候，应该为范围渐变留出缓冲，这些情况包括：新的功能设想，对手的新动向，整合中出现的问题，解决各种错误，易用性测试，软件Beta版的测试。

第二十一章《关于战略问题的通信之六》中，作者首先介绍了两个失败的软件项目，引出主题：硬件随着时间发展，因此，从长远的观点看，那些不关心效率、不关心程序是否臃肿、一个劲往软件中加入高级功能的程序员将会拥有更好的产品。作者认为跨平台的C语言能够完美解决跨浏览器的网页体验不一致的感觉。关于互动性和用户界面标准，历史的发展有三个阶段：在第一阶段中，程序没有好看的UI，只有丑陋的命令行；在第二个阶段中，程序开始有了UI，但随之而来的问题包括程序员拥有设计UI的决定权利，几乎可以按照自己的偏好来设计UI；在第三个阶段中，Mac和Windows提供了统一的标准的用户界面。最后，作者对Ajax程序的用户界面会出现某种程度的统一保持乐观态度。

第二十二章《你的编程语言做得到吗》认为匿名函数在简化代码和方便阅读方面很有效。将函数当参数是函数式编程的特点，那些具备“第一类函数”功能的编程语言能够让人更容易地完成进一步抽象代码的任务，使代码体积更小、更紧凑、更容易重复利用、更方便扩展。

第二十三章《让错误的代码显而易见》讲的是如何通过命名变量来使肉眼debug更轻松一点。作者建议读者寻找一种代码的书写规范，让错误的代码变得更容易被看出，让代码中的相关信息在显示屏上集中在一起，使你能够当场发现和改正某些种类的错误。然后，作者提出应用型匈牙利风格的命名方式是可用的，但是系统匈牙利风格的命名方式是糟糕的。

第二十四章《Eric Sink on the Business of Software》是作者为《Eric Sink on the Business of Software》编写的前言。作者提出，看到自己的生意日渐壮大是令人快乐激动的。

第二十五章《Micro-ISV: From Vision to Reality》是作者为《Micro-ISV: From Vision to Reality》编写的前言。作者认为，创办软件公司的真正乐趣是，创造一些东西，自己参与整个过程，细心培育，不间断地劳作，不断地投入，看着它成长，看着自己一步步得到报偿，这是世界上最带劲的旅程。

第二十六章《飙高音》强调了优秀的程序员的重要性，无论是从效率上，从工作能力上，还是从产品质量上。

第二十七章《仿生学办公室》认为有三个理由要认真对待程序员的工作环境：第一，许多证据表明，良好的办公空间――尤其是单独的办公室――能够提高程序员的生产率；第二，漂亮有窗的办公室会使得招募明星程序员变得容易许多；第三，这也是管理者办公的地方。然后作者列出了具体设计，并认为值得。

第二十八章《他山之石，可以攻玉》提出，要想使自己的软件产品变得可靠，可以有两种选择：一是让自己变成大公司，二是公开自己的源码好让别的程序员能够维护它。

第二十九章《简化性》提出，“简化性”不能被理解为功能上的简化。如果把“简化性”理解成与用户行为紧密对应的程序模型以及由此产生的产品的易用性，或者把它理解成简洁明快的视觉呈现，那就是具有积极意义的。

第三十章《揉一揉，搓一搓》的意思是重构代码。作者在本章讲述了自己重构FogBugz的经历，并指出在这个过程中重构相对于推倒重来的优点：一，它的耗时大大少于一次彻底的重写；二，没有引入任何新的错误；三，在任意时刻程序都可用；四，工作进度是完全可以预测的；五，重构结束后向现在的代码加入新功能实施起来容易多了。

第三十一章《组织beta测试的十二个最高秘诀》指出了组织beta测试的十二个最高秘诀。它们分别是：
1，开放式的beta测试是没用的；
2，让测试者承诺会向你发送反馈意见；
3，不要妄想一次完整的beta测试能在少于8-10周的时间内完成；
4，不要妄想在测试中发布新的软件版本快于两周一次；
5，一次beta测试中计划发布的软件版本不要少于4个；
6，如果在测试过程中添加了一个功能，那整个测试就要回到起点，并且需要再发布三到四个版本；
7，只有很少的测试者（五分之一左右）会向你提交反馈意见；
8，制定一条政策，向我们提交反馈意见的测试者都将免费获赠一份正版软件；
9，至少需要100个足够严肃的测试者；
10，参考第7条，至少需要1500份参加beta测试的申请表才能获得300个严肃测试者；
11，大多数测试者只是在第一次拿到这个程序的时候才会去试用一下，因此需要错开不同版本的测试对象；
12，不要混淆技术beta和市场beta，上面谈的这些都是针对技术beta的。

第三十二章《建立优质客户服务的七个步骤》讲了建立优质客户服务的八点经验。
1，选择深入的，防止类似的问题再次发生的做法，抱有永久性解决问题的信念；
2，用巧妙的方式提醒用户检查一些简单的问题；
3，客户遇到问题时有时候会选择生闷气，另外一些会联系服务提供者。迅速而真诚地为客户解决问题可以让客户为你打很高的印象分；
4，主动承认错误；
5，学会说软话；
6，承受客户的怒火；
7，不要贪婪，要勇于退款；
8，需要非常专业的人与顾客交谈。

第三十三章《挑选发布日期》提出了软件开发周期的三条规则：
1，确定发布日期，这个日期可以根据客观情况也可以根据主观愿望进行选择；
2，列出软件要实现的功能，然后按照优先顺序排序；
3，每当你落后于预定进程时，就把排在最后的功能砍掉。
另外，作者按照用户的数量规模给出建议。如果顾客人数较少，那最好经常性地发布小幅修改的新版本；如果有了大量付费用户，那么最好不要太频繁地发布新版本；如果有几百万用户和几百万整合点的软件系统，最好偶尔发布一个新版本。

第三十四章《软件定价》中，作者认为价格歧视在短期利润最大化方面很好用。在软件业中，将产品分为“专业版”和“家庭版”是一种价格歧视。但是，作者最后认为给软件定合适的价格的办法只有给它标价，并且这个办法也是不能多次实验的。消费者心理也是个奇怪的玩意。

第三十五章《五个为什么》给出了一个找到根本性的原因的方法：追问到底。如果顾客感到故障对他的使用造成了影响，就应该补偿他。

第三十六章《确定优先顺序》首先列出了两种不应该被采用的方法：第一个是开发某个功能只因为答应过一个顾客；第二个是不要因为有些事情不得不做就去做它，做之前要考虑这件事情的重要性。然后，作者说明了他们当时是怎样定出FogBugz5.0的功能的初步的优先顺序的：
1，让每个人想好自己想要实现的功能，汇总；
2，投票审查这些功能，去掉票数特别低的功能；
3，按照功能的实现难度为功能定价；
4，给每个人一定价格，要求他们“买下”自己最想实现的功能；
5，对每个功能按照销售额/费用的比值进行排序。
这样就获得了优先顺序。我个人把这个过程理解为综合考虑了功能重要性和开发时间的充裕程度的算法。



































